<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite id="0" name="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\IAMDisabled.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\IAMDisabled.spec.js" hostname="localhost" tests="4" failures="0" time="0.53" timestamp="2018-03-16T13:48:08">
    <properties>
    </properties>
    <testcase classname="iamEnabled Function" name="Should return a bool for fields to figure out weather they are disabled" time="0">
    </testcase>
    <testcase classname="iamEnabled Function" name="Should override with the all field" time="0">
    </testcase>
    <testcase classname="iamEnabled Function" name="Should default to true if something goes wrong" time="0">
    </testcase>
    <testcase classname="iamEnabled Function" name="Should handle effects but field missing" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="1" name="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\conditions.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\conditions.spec.js" hostname="localhost" tests="6" failures="0" time="0.08" timestamp="2018-03-16T13:48:09">
    <properties>
    </properties>
    <testcase classname="includes condition" name="Should run includes on a string or array" time="0">
    </testcase>
    <testcase classname="includes condition" name="Should handle null values" time="0">
    </testcase>
    <testcase classname="stringEquals" name="Should return true when string matches" time="0">
    </testcase>
    <testcase classname="stringEquals" name="Should return false if the values dont exist" time="0">
    </testcase>
    <testcase classname="excludes" name="Should return true when value doesnt exist" time="0">
    </testcase>
    <testcase classname="excludes" name="Shoudl return false when value exist" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="2" name="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\index.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\index.spec.js" hostname="localhost" tests="11" failures="0" time="0.17" timestamp="2018-03-16T13:48:09">
    <properties>
    </properties>
    <testcase classname="IAM Policy Component" name="Component Should exist if policy is passed in " time="0">
    </testcase>
    <testcase classname="IAM Policy Component" name="Component Should not exist if policy is null" time="0">
    </testcase>
    <testcase classname="IAM Policy Component" name="Should handle not finding a statement action" time="0">
    </testcase>
    <testcase classname="IAM Policy Component" name="Should update statement effects only when policy prop is updated and changes" time="0">
    </testcase>
    <testcase classname="IAM Policy Component" name="Should render policy Errors if they exist" time="0">
    </testcase>
    <testcase classname="IAM Policy Component" name="Should update to new userData state only if the next user data props are set." time="0">
    </testcase>
    <testcase classname="IAM Policy class Methods =&gt; getUserData" name="Should get user data from state by key and subkey" time="0">
    </testcase>
    <testcase classname="IAM Policy class Methods =&gt; getUserData" name="Should get user data from state by key only" time="0">
    </testcase>
    <testcase classname="IAM Policy class Methods =&gt; getUserData" name="Should return null when there is no userData" time="0">
    </testcase>
    <testcase classname="IAM Policy class Methods =&gt; getUserData" name="Should return null when there is no matching key" time="0">
    </testcase>
    <testcase classname="IAM Policy class Methods =&gt; getUserData" name="Should return null when there is no matching subkey" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="3" name="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\resource.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\resource.spec.js" hostname="localhost" tests="12" failures="0" time="0.07" timestamp="2018-03-16T13:48:10">
    <properties>
    </properties>
    <testcase classname="Class construction" name="Should create a new ResourceRules class" time="0">
    </testcase>
    <testcase classname="Class construction" name="Should set class properties" time="0">
    </testcase>
    <testcase classname="Class construction" name="Should set its all flag to true when we get the * identifier" time="0">
    </testcase>
    <testcase classname="Class Methods" name="Should get the effect of the rule" time="0">
    </testcase>
    <testcase classname="create Method" name="Should handle the all resource combined with the allow effect" time="0">
    </testcase>
    <testcase classname="create Method" name="Should handle the all resource identifier combined with Deny or any other effect" time="0">
    </testcase>
    <testcase classname="create Method" name="Should handle individual resource identifiers passed as an array" time="0">
    </testcase>
    <testcase classname="create Method" name="Should handle a single non all resource identifier passed as a string" time="0">
    </testcase>
    <testcase classname="validateConditions method" name="Should validate conditions" time="0">
    </testcase>
    <testcase classname="validateConditions method" name="Should handle the claimTypes tokenizer" time="0">
    </testcase>
    <testcase classname="validateConditions method" name="Should handle failed claimTypes tokenizer" time="0">
    </testcase>
    <testcase classname="validateConditions method" name="Should handle a failed validation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="4" name="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\effects.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\effects.spec.js" hostname="localhost" tests="1" failures="0" time="0.05" timestamp="2018-03-16T13:48:10">
    <properties>
    </properties>
    <testcase classname="createEffectsFromPolicy Function" name="Should be create effects from policy statement " time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="5" name="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\policyValidator.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\util\__tests__\policyValidator.spec.js" hostname="localhost" tests="5" failures="0" time="0.05" timestamp="2018-03-16T13:48:10">
    <properties>
    </properties>
    <testcase classname="class construction" name="Should be create effects from policy statement " time="0">
    </testcase>
    <testcase classname="class construction" name="Should return false on an invalid policy statement" time="0">
    </testcase>
    <testcase classname="class construction" name="Should return invalid on invalid statement" time="0">
    </testcase>
    <testcase classname="class construction" name="Should return invalid on invalid condtions" time="0">
    </testcase>
    <testcase classname="validateTokenizer Function" name="Should validate the tokenizer" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="6" name="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\IAMVisible.spec.js" errors="0" package="C:\development\gfas-react\packages\gfas-iam-react\src\components\IAMPolicy\__tests__\IAMVisible.spec.js" hostname="localhost" tests="6" failures="0" time="0.06" timestamp="2018-03-16T13:48:10">
    <properties>
    </properties>
    <testcase classname="IAMVisible Component" name="Should handle the all modifier" time="0">
    </testcase>
    <testcase classname="IAMVisible Component" name="Should render component if all checks pass" time="0">
    </testcase>
    <testcase classname="iamVisible Function" name="Should return a bool for fields to figure out weather they are disabled" time="0">
    </testcase>
    <testcase classname="iamVisible Function" name="Should override with the all field" time="0">
    </testcase>
    <testcase classname="iamVisible Function" name="Should default to false if something goes wrong" time="0">
    </testcase>
    <testcase classname="iamVisible Function" name="Should handle effects but field missing" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
</testsuites>